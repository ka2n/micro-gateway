// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go/micro/gw/http.proto

package gw

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Http struct {
	Rules []*HttpRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *Http) Reset()                    { *m = Http{} }
func (m *Http) String() string            { return proto.CompactTextString(m) }
func (*Http) ProtoMessage()               {}
func (*Http) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Http) GetRules() []*HttpRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type HttpRule struct {
	Selector string `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	// Types that are valid to be assigned to Pattern:
	//	*HttpRule_Get
	//	*HttpRule_Put
	//	*HttpRule_Post
	//	*HttpRule_Delete
	//	*HttpRule_Patch
	Pattern  isHttpRule_Pattern `protobuf_oneof:"pattern"`
	Body     string             `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Security string             `protobuf:"bytes,9,opt,name=security" json:"security,omitempty"`
}

func (m *HttpRule) Reset()                    { *m = HttpRule{} }
func (m *HttpRule) String() string            { return proto.CompactTextString(m) }
func (*HttpRule) ProtoMessage()               {}
func (*HttpRule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isHttpRule_Pattern interface {
	isHttpRule_Pattern()
}

type HttpRule_Get struct {
	Get string `protobuf:"bytes,2,opt,name=get,oneof"`
}
type HttpRule_Put struct {
	Put string `protobuf:"bytes,3,opt,name=put,oneof"`
}
type HttpRule_Post struct {
	Post string `protobuf:"bytes,4,opt,name=post,oneof"`
}
type HttpRule_Delete struct {
	Delete string `protobuf:"bytes,5,opt,name=delete,oneof"`
}
type HttpRule_Patch struct {
	Patch string `protobuf:"bytes,6,opt,name=patch,oneof"`
}

func (*HttpRule_Get) isHttpRule_Pattern()    {}
func (*HttpRule_Put) isHttpRule_Pattern()    {}
func (*HttpRule_Post) isHttpRule_Pattern()   {}
func (*HttpRule_Delete) isHttpRule_Pattern() {}
func (*HttpRule_Patch) isHttpRule_Pattern()  {}

func (m *HttpRule) GetPattern() isHttpRule_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *HttpRule) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *HttpRule) GetGet() string {
	if x, ok := m.GetPattern().(*HttpRule_Get); ok {
		return x.Get
	}
	return ""
}

func (m *HttpRule) GetPut() string {
	if x, ok := m.GetPattern().(*HttpRule_Put); ok {
		return x.Put
	}
	return ""
}

func (m *HttpRule) GetPost() string {
	if x, ok := m.GetPattern().(*HttpRule_Post); ok {
		return x.Post
	}
	return ""
}

func (m *HttpRule) GetDelete() string {
	if x, ok := m.GetPattern().(*HttpRule_Delete); ok {
		return x.Delete
	}
	return ""
}

func (m *HttpRule) GetPatch() string {
	if x, ok := m.GetPattern().(*HttpRule_Patch); ok {
		return x.Patch
	}
	return ""
}

func (m *HttpRule) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *HttpRule) GetSecurity() string {
	if m != nil {
		return m.Security
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpRule_OneofMarshaler, _HttpRule_OneofUnmarshaler, _HttpRule_OneofSizer, []interface{}{
		(*HttpRule_Get)(nil),
		(*HttpRule_Put)(nil),
		(*HttpRule_Post)(nil),
		(*HttpRule_Delete)(nil),
		(*HttpRule_Patch)(nil),
	}
}

func _HttpRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpRule)
	// pattern
	switch x := m.Pattern.(type) {
	case *HttpRule_Get:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Get)
	case *HttpRule_Put:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Put)
	case *HttpRule_Post:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Post)
	case *HttpRule_Delete:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Delete)
	case *HttpRule_Patch:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Patch)
	case nil:
	default:
		return fmt.Errorf("HttpRule.Pattern has unexpected type %T", x)
	}
	return nil
}

func _HttpRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpRule)
	switch tag {
	case 2: // pattern.get
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Get{x}
		return true, err
	case 3: // pattern.put
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Put{x}
		return true, err
	case 4: // pattern.post
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Post{x}
		return true, err
	case 5: // pattern.delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Delete{x}
		return true, err
	case 6: // pattern.patch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Patch{x}
		return true, err
	default:
		return false, nil
	}
}

func _HttpRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpRule)
	// pattern
	switch x := m.Pattern.(type) {
	case *HttpRule_Get:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Get)))
		n += len(x.Get)
	case *HttpRule_Put:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Put)))
		n += len(x.Put)
	case *HttpRule_Post:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Post)))
		n += len(x.Post)
	case *HttpRule_Delete:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Delete)))
		n += len(x.Delete)
	case *HttpRule_Patch:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Patch)))
		n += len(x.Patch)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SecurityScheme struct {
	Alias       string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	In          string `protobuf:"bytes,5,opt,name=in" json:"in,omitempty"`
}

func (m *SecurityScheme) Reset()                    { *m = SecurityScheme{} }
func (m *SecurityScheme) String() string            { return proto.CompactTextString(m) }
func (*SecurityScheme) ProtoMessage()               {}
func (*SecurityScheme) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SecurityScheme) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *SecurityScheme) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SecurityScheme) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SecurityScheme) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityScheme) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func init() {
	proto.RegisterType((*Http)(nil), "go.micro.gw.Http")
	proto.RegisterType((*HttpRule)(nil), "go.micro.gw.HttpRule")
	proto.RegisterType((*SecurityScheme)(nil), "go.micro.gw.SecurityScheme")
}

func init() { proto.RegisterFile("go/micro/gw/http.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x6e, 0xea, 0x30,
	0x10, 0x85, 0x6f, 0x20, 0xe1, 0x67, 0x90, 0x58, 0x58, 0x5c, 0x64, 0x75, 0x85, 0x58, 0x21, 0x55,
	0x4d, 0x24, 0xe8, 0x13, 0xb0, 0x62, 0x6d, 0x76, 0xdd, 0x39, 0x61, 0x9a, 0x58, 0x4d, 0x62, 0xcb,
	0x19, 0x0b, 0x65, 0xd7, 0x57, 0xec, 0x1b, 0x55, 0xb1, 0x43, 0xc5, 0x6e, 0xbe, 0x2f, 0x13, 0x79,
	0x8e, 0x0e, 0x6c, 0x4b, 0x9d, 0x35, 0xaa, 0xb0, 0x3a, 0x2b, 0xef, 0x59, 0x45, 0x64, 0x52, 0x63,
	0x35, 0x69, 0xb6, 0x2a, 0x75, 0xea, 0x7d, 0x5a, 0xde, 0xf7, 0x27, 0x88, 0x2f, 0x44, 0x86, 0xbd,
	0x42, 0x62, 0x5d, 0x8d, 0x1d, 0x8f, 0x76, 0xd3, 0xc3, 0xea, 0xf8, 0x3f, 0x7d, 0x5a, 0x4a, 0x87,
	0x0d, 0xe1, 0x6a, 0x14, 0x61, 0x67, 0xff, 0x13, 0xc1, 0xe2, 0xe1, 0xd8, 0x0b, 0x2c, 0x3a, 0xac,
	0xb1, 0x20, 0x6d, 0x79, 0xb4, 0x8b, 0x0e, 0x4b, 0xf1, 0xc7, 0x8c, 0xc1, 0xb4, 0x44, 0xe2, 0x93,
	0x41, 0x5f, 0xfe, 0x89, 0x01, 0x06, 0x67, 0x1c, 0xf1, 0xe9, 0xc3, 0x19, 0x47, 0x6c, 0x03, 0xb1,
	0xd1, 0x1d, 0xf1, 0x78, 0x94, 0x9e, 0x18, 0x87, 0xd9, 0x0d, 0x6b, 0x24, 0xe4, 0xc9, 0xe8, 0x47,
	0x66, 0x5b, 0x48, 0x8c, 0xa4, 0xa2, 0xe2, 0xb3, 0xf1, 0x43, 0x40, 0xc6, 0x20, 0xce, 0xf5, 0xad,
	0xe7, 0x73, 0x7f, 0x87, 0x9f, 0xc3, 0x7d, 0x85, 0xb3, 0x8a, 0x7a, 0xbe, 0x7c, 0xdc, 0x17, 0xf8,
	0xbc, 0x84, 0xb9, 0x91, 0x44, 0x68, 0xdb, 0xfd, 0x77, 0x04, 0xeb, 0xeb, 0xe8, 0xaf, 0x45, 0x85,
	0x0d, 0xb2, 0x0d, 0x24, 0xb2, 0x56, 0xb2, 0x1b, 0x63, 0x05, 0x18, 0xde, 0xa0, 0xde, 0x60, 0x08,
	0x25, 0xfc, 0xcc, 0x76, 0xb0, 0xba, 0x61, 0x57, 0x58, 0x65, 0x48, 0xe9, 0x36, 0x64, 0x13, 0xcf,
	0x6a, 0xf8, 0xab, 0x95, 0x0d, 0x86, 0x84, 0xc2, 0xcf, 0x6c, 0x0d, 0x13, 0xd5, 0x86, 0x6c, 0x62,
	0xa2, 0xda, 0xf3, 0xfb, 0xc7, 0xb1, 0x54, 0x54, 0xb9, 0x3c, 0x2d, 0x74, 0x93, 0x7d, 0xc9, 0x63,
	0x1b, 0xfa, 0x7b, 0x2b, 0x25, 0xe1, 0x5d, 0xf6, 0x99, 0xef, 0x2f, 0x77, 0x9f, 0xd9, 0x53, 0xb3,
	0xf9, 0xcc, 0xdb, 0xd3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x00, 0x90, 0xfd, 0xef, 0x01,
	0x00, 0x00,
}
