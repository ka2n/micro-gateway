package gengateway

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"

	"github.com/golang/glog"
	"github.com/grpc-ecosystem/grpc-gateway/utilities"
	"github.com/ka2n/micro-gateway/protoc-gen-microgw/descriptor"
)

type param struct {
	*descriptor.File
	Imports []descriptor.GoPackage
}

type binding struct {
	*descriptor.Binding
}

// HasQueryParam determines if the binding needs parameters in query string.
//
// It sometimes returns true even though actually the binding does not need.
// But it is not serious because it just results in a small amount of extra codes generated.
func (b binding) HasQueryParam() bool {
	if b.Body != nil && len(b.Body.FieldPath) == 0 {
		return false
	}
	fields := make(map[string]bool)
	for _, f := range b.Method.RequestType.Fields {
		fields[f.GetName()] = true
	}
	if b.Body != nil {
		delete(fields, b.Body.FieldPath.String())
	}
	for _, p := range b.PathParams {
		delete(fields, p.FieldPath.String())
	}
	return len(fields) > 0
}

func (b binding) QueryParamFilter() queryParamFilter {
	var seqs [][]string
	if b.Body != nil {
		seqs = append(seqs, strings.Split(b.Body.FieldPath.String(), "."))
	}
	for _, p := range b.PathParams {
		seqs = append(seqs, strings.Split(p.FieldPath.String(), "."))
	}
	return queryParamFilter{utilities.NewDoubleArray(seqs)}
}

// queryParamFilter is a wrapper of utilities.DoubleArray which provides String() to output DoubleArray.Encoding in a stable and predictable format.
type queryParamFilter struct {
	*utilities.DoubleArray
}

func (f queryParamFilter) String() string {
	encodings := make([]string, len(f.Encoding))
	for str, enc := range f.Encoding {
		encodings[enc] = fmt.Sprintf("%q: %d", str, enc)
	}
	e := strings.Join(encodings, ", ")
	return fmt.Sprintf("&utilities.DoubleArray{Encoding: map[string]int{%s}, Base: %#v, Check: %#v}", e, f.Base, f.Check)
}

func applyTemplate(p param) (string, error) {
	w := bytes.NewBuffer(nil)
	if err := headerTemplate.Execute(w, p); err != nil {
		return "", err
	}
	var methodSeen bool
	for _, svc := range p.Services {
		for _, meth := range svc.Methods {
			glog.V(2).Infof("Processing %s.%s", svc.GetName(), meth.GetName())
			methodSeen = true
			for _, b := range meth.Bindings {
				if err := handlerTemplate.Execute(w, binding{Binding: b}); err != nil {
					return "", err
				}
			}
		}
	}
	if !methodSeen {
		return "", errNoTargetService
	}
	if err := trailerTemplate.Execute(w, p.Services); err != nil {
		return "", err
	}
	return w.String(), nil
}

var (
	headerTemplate = template.Must(template.New("header").Parse(`
// Code generated by protoc-gen-grpc-gateway
// source: {{.GetName}}
// DO NOT EDIT!

/*
Package {{.GoPkg.Name}} is a reverse proxy.

It translates micro into RESTful JSON APIs.
*/
package {{.GoPkg.Name}}
import (
	{{range $i := .Imports}}{{if $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}

	{{range $i := .Imports}}{{if not $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}
)

var _ io.Reader
var _ = runtime.String
var _ = utilities.NewDoubleArray
`))

	handlerTemplate = template.Must(template.New("handler").Parse(`
{{template "client-rpc-request-func" .}}

`))

	_ = template.Must(handlerTemplate.New("request-func-signature").Parse(strings.Replace(`
func request_{{.Method.Service.GetName}}_{{.Method.GetName}}_{{.Index}}(ctx context.Context, marshaler runtime.Marshaler, serviceName string, conn client.Client, r *http.Request, pathParams map[string]string, opts ...client.CallOption) (proto.Message, error)
`, "\n", "", -1)))

	_ = template.Must(handlerTemplate.New("client-rpc-request-func").Parse(`
{{if .HasQueryParam}}
var (
	filter_{{.Method.Service.GetName}}_{{.Method.GetName}}_{{.Index}} = {{.QueryParamFilter}}
)
{{end}}
{{template "request-func-signature" .}} {
	var protoReq {{.Method.RequestType.GoType .Method.Service.File.GoPkg.Path}}

{{if .Body}}
	if r.ContentLength > 0 {
		if err := marshaler.NewDecoder(r.Body).Decode(&{{.Body.RHS "protoReq"}}); err != nil {
			return nil, errors.BadRequest("go.micro.api", err.Error())
		}
	}
{{end}}
{{if .PathParams}}
	var (
		val string
		ok bool
		err error
		_ = err
	)
	{{range $param := .PathParams}}
	val, ok = pathParams[{{$param | printf "%q"}}]
	if !ok {
		return nil, errors.BadRequest("go.micro.api", err.Error())
	}
{{if $param.IsNestedProto3 }}
	err = runtime.PopulateFieldFromPath(&protoReq, {{$param | printf "%q"}}, val)
{{else}}
	{{$param.RHS "protoReq"}}, err = {{$param.ConvertFuncExpr}}(val)
{{end}}
	if err != nil {
		return nil, err
	}
	{{end}}
{{end}}
{{if .HasQueryParam}}
	if err := runtime.PopulateQueryParameters(&protoReq, r.URL.Query(), filter_{{.Method.Service.GetName}}_{{.Method.GetName}}_{{.Index}}); err != nil {
		return nil, errors.BadRequest("go.micro.api", err.Error())
	}
{{end}}

	req := conn.NewProtoRequest(serviceName, "{{.Method.Service.GetName}}.{{.Method.GetName}}", &protoReq)
	
	var response {{.Method.ResponseType.GoType .Method.Service.File.GoPkg.Path}}
	if err := conn.Call(ctx, req, &response, opts...); err != nil {
		ce := errors.Parse(err.Error())
		switch ce.Code {
			case 0:
				ce.Code = 500
				ce.Id = "go.micro.api"
				ce.Status = http.StatusText(500)
				ce.Detail = "error during request: " + ce.Detail				
			default:
				return nil, ce
		}
	}
	return &response, nil
}`))

	trailerTemplate = template.Must(template.New("trailer").Parse(`
{{range $svc := .}}
// Register{{$svc.GetName}}HTTPHandler registers the http handlers for service {{$svc.GetName}} to "mux".
func Register{{$svc.GetName}}HTTPHandler(ctx context.Context, mux *runtime.ServeMux, serviceName string, conn client.Client) error {
	if len(serviceName) == 0 {
		serviceName = "{{$svc.File.GetPackage}}"
	}

	copt := client.WithSelectOption(selector.WithStrategy(selector.Random))
	
	{{range $m := $svc.Methods}}
	{{range $b := $m.Bindings}}
	mux.Handle({{$b.HTTPMethod | printf "%q"}}, pattern_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}, func(w http.ResponseWriter, r *http.Request, pathParams map[string]string) {
		ctx := helper.RequestToContext(r)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, r)
		resp, err := request_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}(ctx, inboundMarshaler, serviceName, conn, r, pathParams, copt)
		if err != nil {
			if err, ok := err.(*errors.Error); ok {
				http.Error(w, err.Error(), int(err.Code))
				return
			}
			http.Error(w, err.Error(), 500)
			return			
		}

		b, _ := outboundMarshaler.Marshal(resp)
		w.Header().Set("Content-Length", strconv.Itoa(len(b)))
		w.Write(b)
	})
	{{end}}
	{{end}}
	return nil
}

var (
	{{range $m := $svc.Methods}}
	{{range $b := $m.Bindings}}
	pattern_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}} = runtime.MustPattern(runtime.NewPattern({{$b.PathTmpl.Version}}, {{$b.PathTmpl.OpCodes | printf "%#v"}}, {{$b.PathTmpl.Pool | printf "%#v"}}, {{$b.PathTmpl.Verb | printf "%q"}}))
	{{end}}
	{{end}}
)
{{end}}`))
)
